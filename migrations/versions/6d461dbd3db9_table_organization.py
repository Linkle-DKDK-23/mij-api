"""table Organization

Revision ID: 6d461dbd3db9
Revises: 7d49bbb94fc6
Create Date: 2025-10-15 15:34:53.232159

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6d461dbd3db9'
down_revision: Union[str, Sequence[str], None] = '7d49bbb94fc6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payout_items')
    op.drop_table('post_moderation_events')
    op.drop_table('payout_accounts')
    op.drop_table('payouts')
    op.drop_table('creator_balances')
    op.drop_table('reports')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reports',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('reporter_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('target_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['reporter_user_id'], ['users.id'], name=op.f('fk_reports_reporter_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reports'))
    )
    op.create_table('creator_balances',
    sa.Column('creator_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('available', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('pending', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('currency', sa.CHAR(length=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['creator_user_id'], ['users.id'], name=op.f('fk_creator_balances_creator_user_id_users')),
    sa.PrimaryKeyConstraint('creator_user_id', name=op.f('pk_creator_balances'))
    )
    op.create_table('payouts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('creator_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('currency', sa.CHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('status', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('paid_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['creator_user_id'], ['users.id'], name='fk_payouts_creator_user_id_users'),
    sa.PrimaryKeyConstraint('id', name='pk_payouts'),
    postgresql_ignore_search_path=False
    )
    op.create_table('payout_accounts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('creator_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('external_account_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['creator_user_id'], ['users.id'], name=op.f('fk_payout_accounts_creator_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payout_accounts'))
    )
    op.create_table('post_moderation_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('to_state', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('flags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('acted_by_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('acted_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['acted_by_id'], ['users.id'], name=op.f('fk_post_moderation_events_acted_by_id_users')),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('fk_post_moderation_events_post_id_posts'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_post_moderation_events'))
    )
    op.create_table('payout_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('payout_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('order_item_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['order_item_id'], ['order_items.id'], name=op.f('fk_payout_items_order_item_id_order_items')),
    sa.ForeignKeyConstraint(['payout_id'], ['payouts.id'], name=op.f('fk_payout_items_payout_id_payouts'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payout_items'))
    )
    # ### end Alembic commands ###
